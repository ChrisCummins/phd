#!/usr/bin/env python3
from __future__ import division
from __future__ import print_function

import csv
import re
import sys
from argparse import ArgumentParser

import editdistance
import smith

from labm8.py import fs


class MalformedDataException(smith.SmithException): pass


# Hardcode any known mappings here.
#
# For example, if you have a benchmark named 'foo', with OpenCL
# kernels in 'bar.cl', then add an entry "foo": "bar.cl".
MAPPINGS = {}


def read_csv(path):
  with open(path) as infile:
    reader = csv.DictReader(infile)
    return [row for row in reader]


def get_dynamic_to_static_mapping(static, dynamic, mappings=MAPPINGS):
  for name in sorted(set([x["benchmark"] for x in dynamic])):
    components = name.split("-")
    # The last component is the kernel name.
    benchmark = "-".join(components[:-1])
    path = benchmark + ".cl"
    kernel = components[-1]

    if path not in mappings:
      candidates = [d["file"] for d in static if d["kernel"] == kernel]
      distances = []

      if not len(candidates):
        print("error: no candidate for benchmark '{}' kernel '{}'"
              .format(benchmark, kernel), file=sys.stderr)
        continue
      if path in candidates:
        mappings[name] = path
      else:
        for spath in candidates:
          distances.append((editdistance.eval(spath, path), spath))
        mindistance = min(x[0] for x in distances)
        mins = [x for x in distances if x[0] == mindistance]
        if len(mins) > 1:
          print("error: multiple candidates for benchmark "
                "'{}' kernel '{}': {}"
                .format(name, kernel, ", ".join(
              ["'{}'".format(x[1]) for x in mins])),
                file=sys.stderr)
          continue
        mappings[name] = mins[0][1]
        # If inferred a file path mapping, print it out so
        # that we can confirm by hand.
        print("inferred mapping:", name, "->", mappings[name])

  return mappings


def lookup_static(static, name, mappings):
  components = name.split("-")
  kernel = components[-1]
  mapped = mappings[name]

  for s in static:
    if s["file"] == mapped and s["kernel"] == kernel:
      return s
  # Something has gone seriously wrong.
  print("fatal: could not find mapping for '{}'".format(name),
        file=sys.stderr)
  sys.exit(1)


def print_header(file=sys.stdout):
  print(
      "benchmark",
      "dataset",
      "comp",
      "rational",
      "mem",
      "localmem",
      "coalesced",
      "atomic",
      "transfer",
      "wgsize",
      "F1:transfer/(comp+mem)",
      "F2:coalesced/mem",
      "F3:(localmem/mem)*avgws",
      "F4:comp/mem",
      "runtime",
      # Added after-the-fact:
      "ci",
      "ci / runtime",
      "n",
      sep=',', file=file)


def mkfeatures(static_path, dynamic_path, file=sys.stdout):
  static = read_csv(static_path)
  dynamic = read_csv(dynamic_path)

  # Get mappings from dynamic benchmark -> static features file
  mappings = get_dynamic_to_static_mapping(static, dynamic)

  print_header(file=file)
  for d in dynamic:
    if d["benchmark"] in mappings:
      s = lookup_static(static, d["benchmark"], mappings)
      comp = int(s["comp"])
      mem = int(s["mem"])
      localmem = int(s["localmem"])
      transfer = int(d["transfer"])
      wgsize = int(d["local_size"])

      F1 = transfer / (comp + mem)
      F3 = (localmem / mem) * wgsize

      print(
          d["benchmark"],
          d["dataset"],
          s["comp"],
          s["rational"],
          s["mem"],
          s["localmem"],
          s["coalesced"],
          s["atomic"],
          d["transfer"],
          d["local_size"],
          F1,
          s["F2:coalesced/mem"],
          F3,
          s["F4:comp/mem"],
          d["runtime"],
          # Added after-the-fact:
          d["ci"],
          round(float(d["ci"]) / float(d["runtime"]), 6),
          d["n"],
          sep=",", file=file)


def main():
  parser = ArgumentParser()
  parser.add_argument('kernels', help='path to kernels directory')
  parser.add_argument('logs', help='path to logs directory')
  args = parser.parse_args()

  # try:
  static_path = fs.path(args.kernels, "features.csv")

  static = smith.assert_exists(static_path)

  dynamic_dir = smith.assert_exists(args.logs)
  dynamic_paths = [x for x in fs.ls(dynamic_dir, abspaths=True)
                   if fs.isfile(x) and x.endswith("-dynamic.csv")]

  for dynamic in dynamic_paths:
    outpath = re.sub(r"-dynamic.csv", r".csv", dynamic)
    print("creating features file '{}' ...".format(outpath))
    with open(outpath, "w") as outfile:
      mkfeatures(static, dynamic, file=outfile)


if __name__ == '__main__':
  main()
