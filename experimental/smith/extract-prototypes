#!/usr/bin/env python3
#
# Extract prototypes.
#
import sys
from argparse import ArgumentParser

from smith import clutil

from labm8.py import fs


def features_dir(csv_path):
  return fs.basename(fs.dirname(csv_path))


def print_stats_features(prototype):
  nargs = len(prototype.args)
  safenargs = max(nargs, 1)

  npointers = sum([1 for x in prototype.args if x.is_pointer])
  rpointers = npointers / safenargs
  safenpointers = max(npointers, 1)

  nvectors = sum([1 for x in prototype.args if x.is_vector])

  rglobal = sum([1 for x in prototype.args if x.is_global]) / safenpointers
  rlocal = sum([1 for x in prototype.args if x.is_local]) / safenpointers

  print(nargs, rpointers, rglobal, rlocal, prototype, sep=',')


def main():
  parser = ArgumentParser()
  parser.add_argument('inputs', nargs='+', help='input path(s)')
  parser.add_argument('-d', '--dir-mode', action='store_true',
                      help='treat inputs as directories')
  parser.add_argument('--arguments-only', action='store_true',
                      help='Only print argument types')
  parser.add_argument('-s', '--stats', action='store_true',
                      help='Prototype stats')
  args = parser.parse_args()

  inputs = args.inputs
  dir_mode = args.dir_mode
  arguments_only = args.arguments_only
  stats = args.stats

  if dir_mode:
    trees = [fs.ls(d, abspaths=True, recursive=True) for d in inputs]
    paths = [item for sublist in trees for item in sublist]
  else:
    paths = [fs.path(f) for f in inputs]

  if stats:
    print('nargs', 'rpointers', 'rglobal', 'rlocal', 'prototype', sep=',')

  for path in paths:
    with open(path) as infile:
      src = infile.read()
    for kernel in clutil.get_cl_kernels(src):
      try:
        p = clutil.KernelPrototype.from_source(kernel)
        if stats:
          print_stats_features(p)
        elif arguments_only:
          for arg in p.args:
            t = arg.type[:-1] if arg.is_pointer else arg.type
            print(t)
        else:
          print(p)
      except clutil.PrototypeException:
        print('error: ignored bad prototype', file=sys.stderr)


if __name__ == '__main__':
  main()
