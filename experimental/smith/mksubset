#!/usr/bin/env python3
#
# Prune experimental data to remove any programs which didn't pass
# strictness test and get it down to 1000 kernels. This should
# probably be incorporated into the CLgen pipeline, rather than as a
# postprocess after CLdrive.
#
import re

import pandas as pd

from labm8.py import fs
from labm8.py import io


def intersect(a, b):
  return list(set(a) & set(b))


def prune_file(kernels, infile, file):
  for line in infile:
    if line.split(',')[0] in kernels:
      print(line, end='', file=file)


def main():
  A = pd.read_csv("driver/data/synthetic/platform-a.csv.bkp")
  B = pd.read_csv("driver/data/synthetic/platform-b.csv.bkp")

  kernels = set([re.sub("\.cl.*", ".cl", x) for x in A["benchmark"]])
  kernels &= set([re.sub("\.cl.*", ".cl", x) for x in B["benchmark"]])

  errors = set()
  for base in ["amd", "intel", "nvidia"]:
    print(base)
    with open("driver/data/synthetic/{}-errors.csv.bkp"
                  .format(base)) as infile:
      errors |= set([x.split(',')[0] for x in infile.read().split('\n')])

  excluded = errors & kernels
  good = kernels - errors
  print(len(kernels), len(errors), len(excluded), len(good))
  # print(sorted(kernels)[:10])
  # print(sorted(errors)[:10])
  # print(sorted(excluded)[:10])
  # print(sorted(good)[:10])

  # Prune good kernels:
  A_out = [row for row in A.to_dict('records')
           if re.sub("\.cl.*", ".cl", row["benchmark"]) in good]
  B_out = [row for row in B.to_dict('records')
           if re.sub("\.cl.*", ".cl", row["benchmark"]) in good]
  A = pd.DataFrame(A_out)
  B = pd.DataFrame(B_out)

  Apruned = A[A["kernel_nlines"] > 7][:9973]
  Bpruned = B[B["kernel_nlines"] > 7][:9973]

  print(len(A), len(Apruned), (len(Apruned) / len(A)) * 100)
  print("num kernels", len(set(Apruned["benchmark"])))
  print()
  print(len(B), len(Bpruned), (len(Bpruned) / len(B)) * 100)
  print("num kernels", len(set(Bpruned["benchmark"])))

  # for n in range(8000, 50000):
  #     a = Apruned[:n]
  #     l = len(set(a["benchmark"]))
  #     print(n, l)
  #     if l > 1000:
  #         print("N", n - 1)
  #         break
  # sys.exit(0)

  Apruned.to_csv("driver/data/synthetic/platform-a.csv", index=False)
  Bpruned.to_csv("driver/data/synthetic/platform-b.csv", index=False)

  A = pd.read_csv("driver/data/synthetic/platform-a.csv")
  B = pd.read_csv("driver/data/synthetic/platform-b.csv")

  kernels = set(A["benchmark"])
  _kernels = set(B["benchmark"])
  assert (kernels == _kernels)

  # print("num kernels", len(kernels))

  paths = [re.sub("\.cl.*", ".cl", x) for x in kernels]
  for path in fs.ls("driver/data/synthetic/kernels"):
    if path not in paths:
      fs.rm(fs.path("driver/data/synthetic/kernels", path))

  for base in ["amd", "intel", "nvidia"]:
    for suffix in ["", "-errors"]:
      with open("driver/data/synthetic/{}{}.csv.bkp"
                    .format(base, suffix)) as infile:
        with open("driver/data/synthetic/{}{}.csv"
                      .format(base, suffix), "w") as outfile:
          io.info("Pruning", base + suffix)
          prune_file(paths, infile, outfile)


if __name__ == '__main__':
  main()
