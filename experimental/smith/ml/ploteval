#!/usr/bin/env python3
import re
import sys

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

from labm8.py import fs
from labm8.py import math as labmath
from labm8.py import viz


# Seaborn configuration:
sns.set(style="ticks", color_codes=True)

data = pd.read_csv(fs.path("data/evalsynthetic.csv"), skipinitialspace=True)


def runeval(classifier, features, group, plottype="pdf"):
  def plot(C, outfile=None):
    ax = sns.barplot(x="Group", y="Speedup", hue="Platform", data=C)
    plt.setp(ax.get_xticklabels(), rotation=90)
    plt.ylabel("Speedup")
    plt.xlabel("")
    plt.axhline(y=1)
    plt.ylim(0, 3)
    plt.title("{} classifier, {} features"
              .format(classifier, features))
    viz.finalise(outfile, figsize=(12, 7.5))

  def plot_both(D, platform, outfile=None):
    ax = sns.barplot(x="Group", y="Speedup", hue="Type",
                     data=D[D["Platform"] == platform])
    plt.setp(ax.get_xticklabels(), rotation=90)
    plt.ylabel("Speedup")
    plt.xlabel("")
    plt.axhline(y=1)
    plt.ylim(0, 3)
    plt.title("Platform {}: {} classifier, {} features"
              .format(platform, classifier, features))
    viz.finalise(outfile, figsize=(12, 7.5))

  Bmask = ((data["Training"] == "train(B)") &
           (data["Testing"] == "test(" + group + " ⊆ B)") &
           (data["Features"] == features + " features") &
           (data["Classifier"] == classifier))
  B = data[Bmask]

  BSmask = ((data["Training"] == "train(B + S)") &
            (data["Testing"] == "test(" + group + " ⊆ B)") &
            (data["Features"] == features + " features") &
            (data["Classifier"] == classifier))
  BS = data[BSmask]

  crows, drows = [], []
  for b, bs in zip(B.iterrows(), BS.iterrows()):
    b, bs = b[1], bs[1]

    def from_perc(x):
      return float(x.strip("%"))

    def toperc(x):
      return str(x) + "%"

    c, d1, d2 = bs, b, bs

    d1["Type"] = "Baseline"
    d2["Type"] = "w. Synthetic kernels"
    drows.append(d1)
    drows.append(d2)

    c["Accuracy"] = round(from_perc(c["Accuracy"]) /
                          max(from_perc(b["Accuracy"]), 0.01), 2)
    c["Speedup"] = round(c["Speedup"] / b["Speedup"], 2)
    c["Oracle"] = round(from_perc(c["Oracle"]) /
                        max(from_perc(b["Oracle"]), 0.01), 2)
    crows.append(c)

  C = pd.DataFrame(crows)
  D = pd.DataFrame(drows)

  outbase = ("{features}-{group}-{classifier}-"
             .format(features=re.sub(r"\+", "", features),
                     group=group, classifier=classifier))
  csvbase = fs.path("data", outbase)
  imgbase = fs.path("data", "img", outbase)

  fs.mkdir(fs.path("data", "img", "speedup"))
  plot_both(D, "Platform A", imgbase + "A." + plottype)
  plot_both(D, "Platform B", imgbase + "B." + plottype)
  if group == "benchmark":
    plot(C, fs.path("data", "img", "speedup", outbase) + "." + plottype)
    print(features, group, classifier,
          labmath.mean(C["Speedup"]), sep=",", file=sys.stderr)

  B.to_csv(csvbase + "B.csv", index=False)
  print(csvbase + "B.csv")
  BS.to_csv(csvbase + "BS.csv", index=False)
  print(csvbase + "BS.csv")
  C.to_csv(csvbase + "ratios.csv", index=False)
  print(csvbase + "ratios.csv")


def main():
  runeval("NearestNeighbour", "raw", "suite")
  runeval("NearestNeighbour", "cgo13", "suite")
  runeval("NearestNeighbour", "cgo13+raw", "suite")

  runeval("DecisionTree", "raw", "suite")
  runeval("DecisionTree", "cgo13", "suite")
  runeval("DecisionTree", "cgo13+raw", "suite")

  runeval("NearestNeighbour", "raw", "benchmark")
  runeval("NearestNeighbour", "cgo13", "benchmark")
  runeval("NearestNeighbour", "cgo13+raw", "benchmark")

  runeval("DecisionTree", "raw", "benchmark")
  runeval("DecisionTree", "cgo13", "benchmark")
  runeval("DecisionTree", "cgo13+raw", "benchmark")


if __name__ == "__main__":
  main()
