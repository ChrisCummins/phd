#!/usr/bin/env python2
from __future__ import division
from __future__ import print_function

import csv
import os
import sys
from argparse import ArgumentParser

import smith

from labm8.py import fs


class MalformedDataException(smith.SmithException): pass


DSIZES = [
  #  32-bit float buffer size:
  64,  # 256 B
  128,  # 512 B
  256,  # 1 kB
  512,  # 2 kB
  1024,  # 4 kB
  2048,  # 8 kB
  4096,  # 16 kB
  8192,  # 32 kB
  16384,  # 64 kB
  65536,  # 256 kB
  131072,  # 512 kB
  262144,  # 1 MB
  524288,  # 2 MB
  1048576,  # 4 MB
  2097152,  # 8 MB
  4194304,  # 16 MB
  # 8388608,   # 32 MB
]


def read_file_dataset(path):
  results = []

  with open(path) as infile:
    reader = csv.reader(infile)
    # SCHEMA: [ file, dataset, ... ]
    for row in reader:
      try:
        results.append(str(row[0] + row[1]))
      except Exception:
        print("error: can't read '{}' line: ".format(path),
              ','.join(row)[:30], file=sys.stderr)
  return results


def match_and_remove(entry, inlist):
  try:
    idx = inlist.index(entry)
    del inlist[idx]
    return True
  except ValueError:
    return False


def mkjoblist(kernels_dir, results_path, errors_path):
  kernels = [x for x in fs.ls(kernels_dir) if x.endswith(".cl")]

  results = read_file_dataset(results_path)
  errors = read_file_dataset(errors_path)

  if 'DSIZES' in os.environ:
    dsizes = [str(var) for var in os.environ['DSIZES'].split()]
  else:
    dsizes = [str(var) for var in DSIZES]

  jobs = []
  for file in kernels:
    for dsize in dsizes:
      key = str(file + dsize)
      if match_and_remove(key, results):
        has_result = True
      elif match_and_remove(key, errors):
        has_result = True
      else:
        has_result = False
      if not has_result:
        jobs.append((file, dsize))
  return jobs


def main():
  parser = ArgumentParser()
  parser.add_argument('kernels', help='path to kernels directory')
  parser.add_argument('results', help='path to CSV results file')
  parser.add_argument('errors', help='path to CSV errors file')
  args = parser.parse_args()

  try:
    smith.assert_exists(args.kernels)
    smith.assert_exists(args.results)
    smith.assert_exists(args.errors)

    jobs = mkjoblist(args.kernels, args.results, args.errors)
    for job in jobs:
      print(','.join(job))
  except Exception as e:
    print('fatal:', e, file=sys.stderr)
    sys.exit(1)


if __name__ == '__main__':
  main()
