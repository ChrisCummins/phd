#!/usr/bin/env python3
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from smith import cgo13

from labm8.py import fs
from labm8.py import viz


# Seaborn configuration:
sns.set(style="ticks", color_codes=True)

bench_a_path = fs.path("~/phd/experimental/smith/ml/data/a/benchmarks.csv")
bench_b_path = fs.path("~/phd/experimental/smith/ml/data/b/benchmarks.csv")
syn_a_path = fs.path("~/phd/experimental/smith/ml/data/a/synthetics.csv")
syn_b_path = fs.path("~/phd/experimental/smith/ml/data/b/synthetics.csv")

bench_a = cgo13.LabelledData.from_csv(bench_a_path)
bench_b = cgo13.LabelledData.from_csv(bench_b_path)
syn_a = cgo13.LabelledData.from_csv(syn_a_path)
syn_b = cgo13.LabelledData.from_csv(syn_b_path)

datas = [bench_a, bench_b, syn_a, syn_b]
titles = ["Platform A - Benchmarks", "Platform B - Benchmarks",
          "Platform A - Synthetics", "Platform B - Synthetics"]
colors = sns.color_palette("hls", 4)


def rand_jitter(arr, factor=0.01):
  stdev = factor * (max(arr) - min(arr))
  return arr + np.random.randn(len(arr)) * stdev


def scatter_with_jitter(plt, x, y, **kwargs):
  jitter_opts = kwargs.get("jitter_opts", {})
  if "jitter_opts" in kwargs: kwargs.pop("jitter_opts")

  return plt.scatter(rand_jitter(x, **jitter_opts),
                     rand_jitter(y, **jitter_opts), **kwargs)


def _2x2_column_grid(column_key, column_name, *args, **kwargs):
  run_min = min([min(x[column_key]) for x in datas])
  run_max = max([max(x[column_key]) for x in datas])
  nbins = 50
  binwidth = (run_max - run_min) / nbins

  for i, row in enumerate(zip(datas, titles, colors)):
    x, t, c = row
    ax = plt.subplot(2, 2, i + 1)
    sns.distplot(x[column_key], kde=False, color=c,
                 bins=np.arange(run_min, run_max + binwidth, binwidth))
    plt.xlabel(column_name)
    plt.xlim(run_min, run_max)
    plt.title(t)
    ax.set_yscale("log", nonposx='clip')
  viz.finalise(*args, **kwargs)


def _2x2_scatter_grid(col1_key, col2_key, col1_name, col2_name,
                      *args, **kwargs):
  col1_min = min([min(x[col1_key]) for x in datas])
  col1_max = max([max(x[col1_key]) for x in datas])
  col2_min = min([min(x[col2_key]) for x in datas])
  col2_max = max([max(x[col2_key]) for x in datas])

  for i, row in enumerate(zip(datas, titles, colors)):
    x, t, c = row
    ax = plt.subplot(2, 2, i + 1)
    scatter_with_jitter(plt, x[col1_key], x[col2_key], color=c),
    # plt.scatter(x[col1_key], x[col2_key], color=c)
    plt.xlabel(col1_name)
    plt.ylabel(col2_name)
    plt.xlim(col1_min, col1_max)
    plt.ylim(col2_min, col2_max)
    plt.title(t)
  viz.finalise(*args, **kwargs)


def plot_runtimes(*args, **kwargs):
  _2x2_column_grid("runtime", "Runtime (ms)", *args, **kwargs)


def plot_transfers(*args, **kwargs):
  _2x2_column_grid("transfer", "Transfer (bytes)", *args, **kwargs)


def plot_comp(*args, **kwargs):
  _2x2_column_grid("comp", "#. Computations", *args, **kwargs)


def plot_rational(*args, **kwargs):
  _2x2_column_grid("rational", "#. Rational Instructions", *args, **kwargs)


def plot_mem(*args, **kwargs):
  _2x2_column_grid("mem", "#. Accesses to Global Memory", *args, **kwargs)


def plot_localmem(*args, **kwargs):
  _2x2_column_grid("localmem", "#. Accesses to Local Memory", *args, **kwargs)


def plot_coalesced(*args, **kwargs):
  _2x2_column_grid("coalesced", "#. Coalesced access to Memory", *args,
                   **kwargs)


def plot_wgsize(*args, **kwargs):
  _2x2_column_grid("wgsize", "#. Work items", *args, **kwargs)


def main():
  print("loading data ...")
  ext = "png"

  plot_runtimes("data/img/runtimes." + ext)
  plot_transfers("data/img/transfer." + ext)
  plot_comp("data/img/comp." + ext)
  plot_rational("data/img/rational." + ext)
  plot_mem("data/img/mem." + ext)
  plot_localmem("data/img/localmem." + ext)
  plot_coalesced("data/img/coalesced." + ext)
  plot_wgsize("data/img/wgsize." + ext)

  _2x2_scatter_grid("comp", "transfer", "#. Computations", "Transfer (bytes)",
                    "data/img/scatter-comp-transfer." + ext)
  _2x2_scatter_grid("F1:transfer/(comp+mem)", "F2:coalesced/mem",
                    "F1 transfer / (comp + mem)", "F2 coalesced / mem",
                    "data/img/scatter-f1-f2." + ext)


if __name__ == "__main__":
  main()
