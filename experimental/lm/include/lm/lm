// -*-c++-*-
//
// lm - linear math
#pragma once

#include <vector>
#include <iostream>
#include <stdexcept>

namespace lm {

namespace {

inline void lm_assert(bool conditional, const char*msg = "") {
  if (!conditional)
    throw std::runtime_error{msg};
}

}  // anonymous namespace

using DefaultScalar = float;

template<typename Scalar = DefaultScalar>
class Vector {
 private:
  // Private member variables
  std::vector<Scalar> _data;

 public:
  // Member types

  using value_type = Scalar;
  using iterator = typename decltype(_data)::iterator;

  // Constructors

  Vector(std::initializer_list<Scalar> il) : _data(il) {}

  explicit Vector(const size_t size) : _data(size) {}

  Vector(Scalar* begin, Scalar* end) : _data(begin, end) {}

  // Accessors

  auto size() const { return _data.size(); }

  auto operator[](const size_t i) {
    return _data.at(i);
  }

  auto operator[](const size_t i) const {
    return _data.at(i);
  }

  friend std::ostream& operator<<(std::ostream& out, const Vector& v) {
    for (const auto& e : v)
      out << e << ' ';
    return out;
  }

  // Iterators

  auto begin() { return _data.begin(); }
  auto begin() const { return _data.begin(); }

  auto end() { return _data.end(); }
  auto end() const { return _data.end(); }

  // Scalar Operators

  void operator+=(const Scalar& x) {
    for (auto& v : *this)
      v += x;
  }

  Vector operator+(const Scalar& x) {
    Vector ret(*this);
    ret += x;
    return ret;
  }

  void operator*=(const Scalar& x) {
    for (auto& v : *this)
      v *= x;
  }

  Vector operator*(const Scalar& x) {
    Vector ret(*this);
    ret *= x;
    return ret;
  }

  void operator/=(const Scalar& x) {
    for (auto& v : *this)
      v /= x;
  }

  Vector operator/(const Scalar& x) {
    Vector ret(*this);
    ret /= x;
    return ret;
  }

  // Vector Operators

  bool operator==(const Vector& rhs) {
    return _data == rhs._data;
  }
};

template<typename Scalar = DefaultScalar>
class Matrix {
 private:
  size_t _rows, _cols;
  std::vector<Scalar> _data;

 public:
  // Member types
  using value_type = Scalar;
  using row_col_iterator = typename decltype(_data)::iterator;

  // Constructors

  Matrix(std::initializer_list<Vector<Scalar>> il)
      : _rows(il.size()), _cols((*il.begin()).size()) {
    for (auto& row : il) {
      lm_assert(row.size() == _cols, "matrix dimensionality");
      for (auto& e : row)
        _data.push_back(e);
    }
  }

  Matrix(std::initializer_list<std::initializer_list<Scalar>> il)
      : _rows(il.size()), _cols((*il.begin()).size()) {
    for (auto& row : il) {
      lm_assert(row.size() == _cols, "matrix dimensionality");
      _data.insert(_data.end(), row.begin(), row.end());
    }
  }

  Matrix(const size_t nrows, const size_t ncols)
      : _rows(nrows), _cols(ncols), _data(nrows * ncols) {}

  Matrix(const size_t ncols, Scalar* begin, Scalar* end) :
      _cols(ncols), _data(begin, end) {
    assert(!(_data.size() % _cols));
    _rows = _data.size() / _cols;
  }

  // Accessors

  auto rows() const { return _rows; }

  auto cols() const { return _cols; }

  auto size() const { return _data.size(); }

  friend std::ostream& operator<<(std::ostream& out, const Matrix& m) {
    for (size_t j = 0; j < m.rows(); ++j) {
      for (size_t i = 0; i < m.cols(); ++i)
        out << m._data[j * m.cols() + i] << ' ';
      out << std::endl;
    }
    return out;
  }

  // Iterators

  auto begin() { return _data.begin(); }
  auto begin() const { return _data.begin(); }

  auto end() { return _data.end(); }
  auto end() const { return _data.end(); }


  // Matrix Operators

  bool operator==(const Matrix& rhs) {
    return rows() == rhs.rows()
        && cols() == rhs.cols()
        &&  _data == rhs._data;
  }
};


}  // namespace lm
