# Copyright 2019 Chris Cummins <chrisc.101@gmail.com>.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Unit tests for //getconfig.py."""
import os

import pathlib
import subprocess

import getconfig
from labm8 import app
from labm8 import test


FLAGS = app.FLAGS


def test_GetGlobalConfig_system_values():
  """Check that the repo config has all of the expected fields."""
  config = getconfig.GetGlobalConfig()
  assert config.HasField('uname')
  assert config.HasField('configure_id')
  assert config.HasField('with_cuda')
  assert config.options.HasField('with_cuda')
  assert config.options.HasField('update_git_submodules')
  assert config.paths.HasField('repo_root')
  assert config.paths.HasField('python')


def test_uname():
  """Test that uname is one of the expected values."""
  config = getconfig.GetGlobalConfig()
  assert config.uname in {'darwin', 'linux'}


def test_configure_id():
  """Test that the ID generated by configure has not changed.

  If this test fails, do not panic. It simply indicates that the you need to
  run ./configure again.
  """
  config = getconfig.GetGlobalConfig()
  configure_path = pathlib.Path(config.paths.repo_root) / 'configure'
  assert configure_path.is_file()

  def ToConfigureArg(field: str) -> str:
    """Turn an 'options' field into a --[no]arg ./configure argument."""
    return f'--{field}' if getattr(config.options, field) else f'--no{field}'

  args = [ToConfigureArg(f.name) for f in config.options.DESCRIPTOR.fields]
  cmd = [str(configure_path), '--print_id', '--noninteractive'] + args
  print('$', ' '.join(cmd))
  assert config.configure_id == subprocess.check_output(
      cmd, universal_newlines=True).rstrip()


def test_GlobalConfigPaths_repo_root():
  """Test that repo_root is a directory."""
  config = getconfig.GetGlobalConfig()
  assert pathlib.Path(config.paths.repo_root).is_dir()


def test_GlobalConfigPaths_python():
  """Test that python is an executable."""
  config = getconfig.GetGlobalConfig()
  assert pathlib.Path(config.paths.python).is_file()
  assert os.access(config.paths.python, os.X_OK)


if __name__ == '__main__':
  test.Main()
