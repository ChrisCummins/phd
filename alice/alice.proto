// The execution ledger.

syntax = "proto2";

import "config/proto/config.proto";

package phd;

// A ledger entry records the invocation and outcome of a single command.
// A command is a bazel target and a set of arguments.
message LedgerEntry {
  // A numeric counter of this entry in the ledger. >= 1.
  optional int64 id = 1;
  
  optional ExecHost exec_host = 2;
  // The start time, in milliseconds since the epoch, UTC time zone.
  optional int64 start_utc_epoch_ms = 4;

  optional RepoState repo_state = 5;

  // The target which is to be built and executed.
  optional string target = 8;
  repeated string bazel_args = 9;
  // The list of arguments passed to the binary target.
  repeated string bin_args = 10;

  // The command end time, in milliseconds since the epoch, UTC time zone.
  optional int64 end_utc_epoch_ms = 11;
  // The integer returncode of the command. In the range 0-255.
  optional int32 returncode = 12;
  // The output of the command.
  optional string stdout_and_stderr = 13;
}

// A ledger is a list of entries.
message Ledger {
  repeated LedgerEntry entries = 1;
}

message ExecHost {
  optional string hostname = 1;
  optional string user = 2;
  optional RepoState repo_state_at_service_launch = 3;
}

service ExecService {
  rpc Run (RunRequest) returns (RunResponse);
  rpc Status (Null) returns (ExecServiceStatus)
}

message RepoState {
  // The hash of the current git HEAD. Created using:
  //   $ git rev-parse HEAD
  optional string git_head_id = 1;
  // Created by concatenating the output of these commands, which show the
  // staged changes, unstaged changes, and untracked files, respectively:
  //   $ git --no-pager diff --cached
  //   $ git --no-pager diff
  //   $ for f in $(git ls-files --others --exclude-standard); do \
  //         git --no-pager diff /dev/null $f; \
  //     done
  optional string git_diff = 2;
  optional phd.GlobalConfig config = 3;
}

message RunRequest {
  repeated RepoState repo_state = 1;

  // The target which is to be built and executed.
  optional string target = 2;

  repeated string bazel_args = 3;

  // The list of arguments to be passed to the built target.
  repeated string bin_args = 4;

  // The number of seconds to allow for execution.
  optional int64 timeout_seconds = 5;
}

message RunResponse {
  // TODO(cec): Error if git checkout fails.
  // TODO(cec): Error if bazel build fails.
}

message Null {
}

message ExecServiceStatus {
  // TODO(cec): Currently active jobs.
}
