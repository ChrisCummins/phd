// The execution ledger.
//
// Copyright (c) 2019 Chris Cummins <chrisc.101@gmail.com>.
//
// alice is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// alice is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with alice.  If not, see <https://www.gnu.org/licenses/>.

syntax = "proto2";

import "config.proto";

package phd;

// A ledger entry records the invocation and outcome of a single command.
// A command is a bazel target and a set of arguments.
message LedgerEntry {

  enum JobStatus {
    WAITING = 0; // Currently not used.
    BUILDING = 1;
    RUNNING = 2;
    COMPLETE = 3;
  };

  enum JobOutcome {
    UNKNOWN = 0;
    RUN_SUCCEEDED = 1;
    BUILD_FAILED = 2;
    RUN_FAILED = 3;
  };

  // A numeric counter of this entry in the ledger. >= 1.
  optional int64 id = 1;
  optional string worker_id = 2;
  optional phd.GlobalConfig repo_config = 4;
  optional RunRequest run_request = 5;
  optional JobStatus job_status = 6;
  optional JobOutcome job_outcome = 7;
  // The build start time, in milliseconds since the UNIX epoch.
  optional int64 build_start_unix_epoch_ms = 8;
  // The execution start time, in milliseconds since the epoch, UTC time zone.
  optional int64 run_start_unix_epoch_ms = 9;
  // The command end time, in milliseconds since the UNIX epoch.
  optional int64 run_end_unix_epoch_ms = 10;
  // The integer returncode of the command. In the range 0-255.
  optional int32 returncode = 11;
  // The output of the command.
  optional string stdout = 12;
  optional string stderr = 13;
}

message LedgerId {
  optional int64 id = 1;
}

service Ledger {
  // Client methods.
  rpc Add (RunRequest) returns (LedgerId);
  rpc Get (LedgerId) returns (LedgerEntry);

  // Worker bee methods.
  rpc Update (LedgerEntry) returns (Null);
  rpc RegisterWorkerBee (String) returns (Null);
  rpc UnRegisterWorkerBee (String) returns (Null);
}

service WorkerBee {
  rpc Run (RunRequest) returns (Null);
  rpc Ping (Null) returns (Null);
  rpc Get (LedgerId) returns (LedgerEntry);
}

message RepoState {
  optional string remote_url = 1;
  optional string tracking_branch = 2;
  // The hash of the current git HEAD. Created using:
  //   $ git rev-parse HEAD
  optional string head_id = 3;
  // Created by concatenating the output of these commands, which show the
  // staged changes, unstaged changes, and untracked files, respectively:
  //   $ git --no-pager diff --cached
  //   $ git --no-pager diff
  //   $ for f in $(git ls-files --others --exclude-standard); do \
  //         git --no-pager diff /dev/null $f; \
  //     done
  optional string git_diff = 4;
}

message RunRequest {
  optional RepoState repo_state = 1;
  // The target which is to be built and executed.
  optional string target = 2;
  // The list of arguments to be passed to bazel.
  repeated string bazel_args = 3;
  // The list of arguments to be passed to the built target.
  repeated string bin_args = 4;
  // The number of seconds to allow for execution.
  optional int64 timeout_seconds = 5;
  // This is set only when used as an argument to WorkerBee.Run().
  optional int64 ledger_id = 6;
  // Optionally specify the ID of the worker bee to run on.
  optional string force_worker_id = 7;
}

message String {
  optional string string = 1;
}

message Null {
}
