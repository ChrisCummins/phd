// Protocol buffers used for organizing mass-clones of GitHub repos.
//
// Copyright 2018, 2019 Chris Cummins <chrisc.101@gmail.com>.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package scrape_repos;

option go_package = "scrape_repospb";
option java_multiple_files = true;
option java_outer_classname = "ScrapeReposProto";
option java_package = "com.scrape_repos";

// The schema for "clone lists", which are used to determine the GitHub queries
// to run and repos to clone.
message LanguageCloneList {
  repeated LanguageToClone language = 1;
}

// A single programming language to clone repositories of.
message LanguageToClone {
  optional string language = 1;
  // A list of queries to search for repositories on GitHub. Queries are
  // searched in the order they appear, until num_repos_to_clone repositories
  // have been cloned. For parameters, see the GitHub API docs:
  // https://developer.github.com/v3/search/#search-repositories
  repeated GitHubRepositoryQuery query = 2;
  // The base directory to clone GitHub repositories to.
  optional string destination_directory = 3;
  // The configuration for the program which imports source code from cloned
  // repositories into contentfile databases.
  repeated ContentFilesImporterConfig importer = 6;
  // An optional list of HTTPS repo URLs to ignore, e.g.
  // "https://github.com/ChrisCummins/phd.git". Before a repo is scraped, the
  // URL is checked against this list, and ignored if it matches. Black listing
  // is case sentive - only lower case letters should be used.
  repeated string clone_from_url_blacklist = 7;
}

// A GitHub query to search for repositories.
message GitHubRepositoryQuery {
  // The query string.
  optional string string = 1;
  // The maximum number of results to process for this query. Less results
  // will be processed if the query returns less than this number of results.
  // Note that the GitHub API may limit the maximum number of results which
  // are returned (currently this limit is 1,000 results per query).
  optional int32 max_results = 2 [default = 1000];
}

// The configuration for the contentfiles importer.
message ContentFilesImporterConfig {
  // A regular expression to match repo-relative file paths. E.g. the pattern
  // "src/.*\.c" would match any files in a repository's 'src/' directory ending
  // in suffix '.c'. This pattern must match the entire path. E.g. the pattern
  // '\.c$' would match only a single file called '.c'. The start and end of
  // match characters '^' and '$' are permitted but redundant.
  optional string source_code_pattern = 1;
  // A list of preprocessor passes to run on each imported source code, in the
  // order in which they should be executed. A preprocesor is a Python function,
  // decorated with the
  // @datasets.github.scrape_repos.preprocessors.public.dataset_preprocessor
  // decorator. THe name of the decorator is the fully qualified python module,
  // followed by ':' and the name of the Python function, e.g.
  //    datasets.github.scrape_repos.preprocessors.extractors:JavaMethods
  // See //datasets/github/scrape_repos/preprocessors/... for definitions.
  repeated string preprocessor = 2;
}

// The "metafile" schema. Each repository which is scraped produces one of these
// files, recording various attributes about the repository.
message GitHubRepoMetadata {
  // The number of milliseconds since the Unix epoch that the repository was
  // scraped or cloned.
  optional int64 scraped_unix_epoch_ms = 7;
  optional int64 cloned_unix_epoch_ms = 8;
  // The GitHub username of the repository owner.
  optional string owner = 1;
  // The name of the repository as it appears on GitHub.
  optional string name = 2;
  // The git URL to clone the repo.
  optional string clone_from_url = 3;
  // The number of stargazers, forks, and watchers of the repository.
  optional int32 num_stars = 4;
  optional int32 num_forks = 5;
  optional int32 num_watchers = 6;
}

message ImportWorker {
  optional string clone_from_url = 1;
  optional string clone_dir = 2;
  optional string abspath = 3;
  repeated string all_files_relpaths = 4;
  repeated string preprocessors = 5;
  optional string index_dir = 6;
}

// A single content file record.
message ContentFile {
  optional string clone_from_url = 1;
  optional string relpath = 2;
  optional int32 artifact_index = 3;
  optional bytes sha256 = 4;
  optional int32 charcount = 5;
  optional int32 linecount = 6;
  optional string text = 7;
}

// Used by JavaMethodsExtractor to extract a list of methods from an input
// source.
message MethodsList {
  repeated string method = 1;
}

message ListOfStrings {
  repeated string string = 1;
}

message ListOfListOfStrings {
  repeated ListOfStrings list_of_strings = 1;
}
