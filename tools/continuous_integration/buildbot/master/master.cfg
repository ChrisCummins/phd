# -*- python -*-
# ex: set filetype=python:

# Master configuration for PhD buildbot.

from buildbot.plugins import *

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['buildbotNetUsageData'] = None

c['secretsProviders'] = [
    secrets.SecretInAFile(
        dirname="/var/phd/shared/tools/continuous_integration/buildbot/secrets")
]

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    # <username, password> tuple.
    worker.Worker("cc3", util.Secret("cc3_worker_password"))
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(
    changes.GitPoller(
        'git@github.com:ChrisCummins/phd.git',
        branches=True,
        workdir='phd',
        pollInterval=60,
        project='phd'))
c['change_source'].append(
    changes.GitPoller(
        'git@github.com:ChrisCummins/phd-priv.git',
        branches=True,
        workdir='phd_priv',
        pollInterval=60,
        project='phd_priv'))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

c['schedulers'] = []
c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name="phd",
        change_filter=util.ChangeFilter(project='phd'),
        treeStableTimer=None,
        builderNames=["linux_cpu_phd"]))
c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name="phd_priv",
        change_filter=util.ChangeFilter(project='phd_priv'),
        treeStableTimer=None,
        builderNames=["linux_cpu_phd_priv"]))
c['schedulers'].append(
    schedulers.ForceScheduler(name="Run_phd_Now", builderNames=["linux_cpu_phd"]))
c['schedulers'].append(
    schedulers.ForceScheduler(
        name="Run_phd_priv_Now", builderNames=["linux_cpu_phd_priv"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which workers can execute them.  Note that any
# particular build will only take place on one worker.
c['builders'] = []

def CreateBazelBuildFactory(repourl, branch, host):
    """Create a build factory which runs full bazel test."""
    factory = util.BuildFactory()
    # Check out the source.
    # Always build from a clean tree. This is equivalent to running
    # `git clean -xfd` before every build. See:
    # https://docs.buildbot.net/latest/manual/configuration/buildsteps.html#git
    factory.addStep(
        steps.GitHub(
            repourl=repourl,
            mode='full',
            method='fresh',
            branch=branch,
            submodules=True))
    # Run bazel configuration.
    factory.addStep(
        steps.ShellCommand(
            description='./configure',
            descriptionDone='./configure',
            command=[
                "./configure", "--noninteractive", "--nowith_cuda",
                "--nosymlink_python"
            ],
            timeout=360,
            maxTime=360))
    factory.addStep(
        steps.ShellCommand(
            description='bazel test',
            descriptionDone='bazel test',
            command=[
                "bash",
                "tools/continuous_integration/buildbot/bazel_wrapper.sh",
                "test",
                # Limit the number of parallel processes to prevent freezing
                # the system when there's other jobs running. There's probably
                # a better way of doing this.
                "--jobs=4",
                "--test_output=summary",
                "--incompatible_remove_native_git_repository=false",
                "//...",
            ],
            env={
                # Needed for compatability with broken python 3 support.
                'BAZEL_PYTHON': "/home/cec/phd/tools/py3_wrapper.sh",
            },
            timeout=360,  # Max time without any console output.
            maxTime=21600,  # = 6 hours. Max time allowed.
            haltOnFailure=False,  # We don't care if bazel complains.
        ))
    factory.addStep(
            steps.ShellCommand(
                description='Generate report',
                descriptionDone='Generated report',
                command=[
                    "bash",
                    "tools/continuous_integration/buildbot/lmk.sh",
                    "bazel",
                    "run",
                    "--jobs=4",
                    "--incompatible_remove_native_git_repository=false",
                    "//tools/continuous_integration/buildbot/report_generator",
                    "--",
                    util.Interpolate("--testlogs=%(prop:builddir)s/build/bazel-out/k8-fastbuild/testlogs"),
                    "--host={}".format(host),
                    "--db=file:///var/phd/db/cc1.mysql?buildbot_{}?charset=utf8".format(host),
                    "--v=1",
                ],
                env={
                    # Needed for compatability with broken python 3 support.
                    'BAZEL_PYTHON': "/home/cec/phd/tools/py3_wrapper.sh",
                },
                timeout=360,  # Max time without any console output.
                maxTime=360,
            ))
    return factory

c['builders'].append(
    util.BuilderConfig(
        name="linux_cpu_phd",
        workernames=["cc3"],
        factory=CreateBazelBuildFactory(
            repourl='git@github.com:ChrisCummins/phd.git', branch='master',
            host='linux_cpu_phd')))

c['builders'].append(
    util.BuilderConfig(
        name="linux_cpu_phd_priv",
        workernames=["cc3"],
        factory=CreateBazelBuildFactory(
            repourl="git@github.com:ChrisCummins/phd-priv.git",
            branch="wip/graph", host='linux_cpu_phd_priv')))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "PhD"
c['titleURL'] = "https://github.com/ChrisCummins/phd"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://cc1.inf.ed.ac.uk:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(
    port=8010, plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
c['www']['authz'] = util.Authz(
    allowRules=[util.AnyEndpointMatcher(role="admins")],
    roleMatchers=[util.RolesFromUsername(
        roles=['admins'], usernames=['cec'])])
c['www']['auth'] = util.UserPasswordAuth([
    # <user, password> tuples.
    ('cec', util.Secret("cec_user_password"))
])

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}
