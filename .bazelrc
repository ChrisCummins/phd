# See: https://bazel.build/versions/master/docs/bazel-user-manual.html#flag--compilation_mode

# Temporary workarounds until updated to new bazel version.
build --incompatible_use_python_toolchains=false
build --incompatible_string_join_requires_strings
test --incompatible_use_python_toolchains=false
test --incompatible_string_join_requires_strings

build --cxxopt='-std=c++14'
test --cxxopt='-std=c++14'

# This flag is set by IntelliJ. Set it here so that alternating between command
# line and IntelliJ invocations does not reset the analysis cache.
test --runs_per_test=1

build --workspace_status_command=tools/workspace_status.sh
test --workspace_status_command=tools/workspace_status.sh

# Test options:
test --test_output=errors
test --keep_going

# Address sanitizer
# To use it: bazel build --config asan
build:asan --strip=never
build:asan --copt -fsanitize=address
build:asan --copt -DADDRESS_SANITIZER
build:asan --copt -O1
build:asan --copt -g
build:asan --copt -fno-omit-frame-pointer
build:asan --linkopt -fsanitize=address

# Thread sanitizer
# bazel build --config tsan
build:tsan --strip=never
build:tsan --copt -fsanitize=thread
build:tsan --copt -DTHREAD_SANITIZER
build:tsan --copt -DDYNAMIC_ANNOTATIONS_ENABLED=1
build:tsan --copt -DDYNAMIC_ANNOTATIONS_EXTERNAL_IMPL=1
build:tsan --copt -O1
build:tsan --copt -fno-omit-frame-pointer
build:tsan --linkopt -fsanitize=thread

# --config msan: Memory sanitizer
build:msan --strip=never
build:msan --copt -fsanitize=memory
build:msan --copt -DADDRESS_SANITIZER
build:msan --copt -O1
build:msan --copt -fno-omit-frame-pointer
build:msan --linkopt -fsanitize=memory

# --config ubsan: Undefined Behavior Sanitizer
build:ubsan --strip=never
build:ubsan --copt -fsanitize=undefined
build:ubsan --copt -O1
build:ubsan --copt -fno-omit-frame-pointer
build:ubsan --linkopt -fsanitize=undefined
build:ubsan --linkopt -lubsan

# Control progress output when invoked by Travis
build:travis --noshow_progress --show_task_finish --action_env=PATH --action_env=PYENV_VERSION=3.6.3
