#!/usr/bin/env python2.7
#
# Copyright 2016-2020 Chris Cummins <chrisc.101@gmail.com>.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
from __future__ import print_function

import json
import os
import sys
from argparse import ArgumentParser


def to_text(val):
  return "yes" if val else "no"


def json_to_stream(blob, stream):
  json.dump(blob, stream, sort_keys=True, indent=4, separators=(',', ': '))
  print("", file=stream)


def merge_dicts(a, b):
  """ returns a copy of 'a' with values updated by 'b' """
  dst = a.copy()
  dst.update(b)
  return dst


DEFAULTS = {
  "dotfiles": os.path.dirname(os.path.realpath(__file__)),
  "private": os.path.expanduser("~/Dropbox/Shared"),
  "apple_id": None,
  "excludes": [],
}


def main():
  parser = ArgumentParser(description="Configure dotfiles install.")
  parser.add_argument(
      "--dotfiles", metavar="<path>", default=DEFAULTS["dotfiles"],
      help="path to dotfiles directory (default: {})".format(
          DEFAULTS["dotfiles"]))
  parser.add_argument(
      "--private", metavar="<path>", default=DEFAULTS["private"],
      help="path to private directory (default: {})".format(
          DEFAULTS["private"]))
  parser.add_argument(
      "--apple-id", metavar="<email>", default=DEFAULTS["apple_id"],
      help="Apple ID (e.g. example@email.com)")
  parser.add_argument(
      "-e", "--excludes", metavar="<tasks>", default="",
      help="comma separated list of tasks to ignore")
  args = parser.parse_args()

  if os.path.exists("config.json"):
    with open("config.json") as infile:
      # Merge existing values into defaults
      cfg = merge_dicts(DEFAULTS, json.loads(infile.read()))
  else:
    cfg = DEFAULTS

  cfg["dotfiles"] = args.dotfiles if args.dotfiles else cfg["dotfiles"]
  cfg["private"] = args.private if args.private else cfg["private"]
  cfg["apple_id"] = args.apple_id if args.apple_id else cfg["apple_id"]
  cfg["excludes"] = args.excludes.split(",") if args.excludes else cfg[
    "excludes"]

  # generate JSON config file
  with open(os.path.join(cfg["dotfiles"], "config.json"), "w") as outfile:
    json_to_stream(cfg, outfile)

  # print configuration
  json_to_stream(cfg, sys.stdout)


if __name__ == "__main__":
  try:
    main()
  except KeyboardInterrupt:
    print("\naborting without writing changes", file=sys.stderr)
    sys.exit(1)
