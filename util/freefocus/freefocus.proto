// Draft message protocol for FreeFocus 1.0.0.

syntax = "proto2";

package freefocus;

option go_package = "freefocuspb";
option java_multiple_files = true;
option java_outer_classname = "FreefocusProto";
option java_package = "com.freefocus";

// Core Building Blocks.

// A Person represents a user in a system.
message Person {
  // The Person id is a string of one or more characters which uniquely
  // identifies the Person amongst all other Persons in a system. Markdown
  // format is accepted, but text must be only a single line.
  optional string id = 1;
  // The name of a Person is a string of one or more characters. A Person may
  // have multiple names. Each name for a Person must be unique, but multiple
  // Persons in a system may have the same name. Markdown format is
  // accepted, but text must be only a single line.
  repeated string name = 2;
  // A Person belongs to zero or more groups, each of which belong to a
  // Workspace.
  repeated WorkspaceGroups workspace_groups = 3;
  // A list of one or more email addresses for a Person.
  repeated string email = 4;
  // The number of milliseconds since the Unix epoch that a Person was created.
  optional int64 created_at_unix_epoch_ms = 5;
  // The number of milliseconds since the Unix epoch that the Person was
  // most recently modified.
  optional int64 most_recently_modified_at_unix_epoch_ms = 6;
  // A list of Groups and the Workspace they belong to. This is required because
  // a Group's ID is unique only to a Workspace. Groups do not need to be
  // top-level in that Workspace.
  message WorkspaceGroups {
    optional string workspace_id = 1;
    repeated string group_id = 2;
  }
}

// A Workspace represents the root object for a collection of Groups, Tasks,
// Tags, and Assets.
message Workspace {
  // The ID of a Workspace is a string of one or more characters which uniquely
  // identifies the Workspace in a system. Markdown format is accepted, but text
  // must be only a single line.
  optional string id = 1;
  // The root of the Workspace's Groups, Tasks, Tags, and Assets trees.
  repeated Group group = 2;
  repeated Task task = 3;
  repeated Tag tag = 4;
  repeated Asset asset = 5;
  // A list of Groups which own this workspace. Only members of these groups
  // may create new top-level groups, tasks, tags, and assets. Members of owner
  // groups may add Workspace comments. Owner groups must belong to the
  // workspace.
  repeated string owner_group_id = 6;
  // A list of Groups which are friends of this workspace. Members of friend
  // groups have read-only access to the Workspace, but can add comments. Friend
  // groups must belong to the workspace.
  repeated string friend_group_id = 7;
  // The number of milliseconds since the Unix epoch that the Workspace was
  // created.
  optional int64 created_at_unix_epoch_ms = 8;
  // The root of a Workspace's comment trees.
  repeated int64 comment_id = 10;
}

// A Group represents a collection of Persons.
message Group {
  // A Group's ID is a string of one or more characters which uniquely
  // identifies the Group in a Workspace. Markdown format is accepted, but text
  // must be only a single line.
  optional string id = 1;
  // A Group belongs to either a Workspace or another Group.
  oneof parent {
    string parent_workspace_id = 2;
    string parent_group_id = 3;
  }
  // An optional string of one or more characters providing a description of the
  // group. Markdown format is accepted.
  optional string description = 4;
  // Lists of a Group's members. A group member is either another Group or a
  // Person. If a group has no Group or Person members, it is destroyed.
  repeated string member_group_id = 5;
  repeated string member_person_id = 6;
  // The ID of the Person who created the group.
  optional string created_by_person_id = 7;
  // The number of milliseconds since the Unix epoch that the Group was
  // created.
  optional int64 created_at_unix_epoch_ms = 8;
  // TODO(cec): Create a GroupChange message, and record a history of all
  // modifications to a group, not just the ID and timestamp of the most recent
  // modification.
  //
  // The ID of the Person who most recently modified the group.
  optional string most_recently_modified_by_person_id = 9;
  // The number of milliseconds since the Unix epoch that the Group was
  // most recently modified.
  optional int64 most_recently_modified_at_unix_epoch_ms = 10;
  // The root of a Group's comment trees.
  repeated int64 comment_id = 11;
}

// A Task is a unit of work.
message Task {
  // The id is a positive integer which uniquely identifies the Task amongst
  // all other Tasks in a Workspace. The id is a counter: the first Task is
  // assigned id 1, the second task id 2, etc.
  optional int64 id = 1;
  // A Task belongs to either a Workspace or another Task.
  oneof parent {
    string parent_workspace_id = 2;
    string parent_task_id = 3;
  }
  // A list of zero or more child Tasks.
  repeated int64 child_task_id = 4;
  // A list of Groups for which the Task is assigned. When a Task is created,
  // no Group is assigned. Members of assigned Groups may complete the Task,
  // but make no other alterations.
  repeated string assigned_group_id = 5;
  // A list of Groups which own this Task. Members of these groups may modify
  // the Task.
  repeated string owner_group_id = 6;
  // A list of Friends of the Task. Members of friend groups may view the Task,
  // but not modify it.
  repeated string friend_group_id = 7;
  // An optional string of one or more characters providing a description of the
  // group. Markdown format is accepted.
  optional string description = 8;
  // A list of zero or more Task Tags.
  repeated string tag_id = 9;
  // A list of zero or more Assets associated with a Task.
  repeated string asset_id = 10;
  // The state of a Task. This defines a set of mutually-exlcusive states that
  // a Task can be in. Note that there is a further state, OVERDUE, but this is
  // not exclusive. A task can be OVERDUE in the READY, BLOCKED, and IN_PROGRESS
  // states.
  enum TaskState {
    // The task is available and elligible for completion.
    READY = 0;
    // The task is not yet ready to be elligible for completion. If a Task is
    // not ready, the field ready_at_unix_epoch_ms must be set to a time in the
    // future at which the task will transition either to READY or BLOCKED.
    NOT_READY = 1;
    // The task depends on other tasks which are not yet completed. If a Task
    // is blocked, the field blocked_by_id must be set to a list of one or more
    // tasks which must be completed before this task will transition to READY.
    // If all of the blocking Tasks are either COMPLETE or DROPPED, the task
    // will transition to READY.
    BLOCKED = 2;
    // The task is currently being worked on. Once a task is in progress, it may
    // transition to either COMPLETE or DROPPED state.
    IN_PROGRESS = 3;
    // The task has been completed. A Task which has been completed cannot
    // change state. If a Task is complete, the completed_by_person_id and
    // completed_at_unix_epoch_ms fields must be set.
    COMPLETE = 4;
    // The task has been dropped. A dropped task can transition to READY, NOT
    // READ
    DROPPED = 5;
  }
  optional TaskState state = 11;
  optional int64 ready_at_unix_epoch_ms = 12;
  repeated int64 blocked_by_id = 13;
  optional string completed_by_person_id = 28;
  optional int64 completed_at_unix_epoch_ms = 14;
  // An optional number of milliseconds since the Unix epoch that the a Task is
  // due at. A task is OVERDUE if this value is in the past and the Task state
  // is one of {READY,BLOCKED,IN_PROGRESS}.
  optional int64 due_at_unix_epoch_ms = 15;
  // An optional estimate for the amount of time taken to complete a task.
  optional int64 estimated_duration_ms = 16;
  // An optional record of the amount of time that a Task has been worked on
  // for. This can be set to any arbitrary positive integer by a Person - there
  // is no mechanism to enforce its accuracy.
  optional int64 actual_duration_ms = 17;
  // An optional number of milliseconds since the Unix epoch that a Task was
  // most recently transition to the IN_PROGRESS state.
  optional int64 started_at_unix_epoch_ms = 18;
  // Support for optionally duplicating tasks.
  oneof duplicate_after {
    // Duplicate the Task this many milliseconds after the Task is completed.
    int64 duplicate_after_ms_completed = 19;
    // Duplicate the Task this many milliseconds after the Task was created.
    int64 duplicate_after_ms_created = 20;
  }
  // The ID of a Task that this task was duplicated from.
  optional int64 duplicated_from_id = 21;
  // The remaining number of times that this Task should be duplicated. Only
  // used if duplicate_after field is set. If this value is < 0, there is no
  // limit on the remaining duplications.
  optional int32 remaining_duplications = 22;
  // The ID of the Person who created the task.
  optional string created_by_person_id = 23;
  // The number of milliseconds since the Unix epoch that the task was created.
  optional int64 created_at_unix_epoch_ms = 24;
  // The ID of the Person who most recently modified the group.
  optional string most_recently_modified_by_person_id = 25;
  // The number of milliseconds since the Unix epoch that the Group was
  // created.
  optional int64 most_recently_modified_at_unix_epoch_ms = 26;
  // The root of the Task's comment tree.
  repeated int64 comment_id = 27;
}

// Tags provide auxiliary labels for Tasks.
message Tag {
  // A Tag's ID is a string of one or more characters which uniquely identifies
  // the Tag in a Workspace. Markdown format is accepted, but text must be only
  // a single line.
  optional string id = 1;
  // A Task belongs to either a Workspace or another Tag.
  oneof parent {
    string parent_workspace_id = 2;
    string parent_tag_id = 3;
  }
  // A list of zero or more child Tags.
  repeated string child_tag_id = 4;
  // A list of Groups which own this Tag. Members of these groups may modify
  // the Tag.
  repeated string owner_group_id = 5;
  // A list of Friends of the Task. Members of friend groups may view the Tag,
  // but not modify it.
  repeated string friend_group_id = 6;
  // An optional string of one or more characters providing a description of the
  // tag. Markdown format is accepted.
  optional string description = 7;
  // The ID of the Person who created the tag.
  optional string created_by_person_id = 23;
  // The number of milliseconds since the Unix epoch that the tag was created.
  optional int64 created_at_unix_epoch_ms = 24;
  // The ID of the Person who most recently modified the tag.
  optional string most_recently_modified_by_person_id = 25;
  // The number of milliseconds since the Unix epoch that the tag was
  // created.
  optional int64 most_recently_modified_at_unix_epoch_ms = 26;
  // The root of the Tag's comment tree.
  repeated int64 comment_id = 11;
}

// An Asset describes a reference to something outside the task manager. It
// could be a digital asset, e.g. a URL, or a refernce to a physicial object,
// such as a notebook.
message Asset {
  // An Asset's ID is a string of one or more characters which uniquely
  // identifies the Asset in a Workspace. Markdown format is accepted, but text
  // must be only a single line.
  optional string id = 1;
  // An Asset belongs to either a Workspace or another Asset.
  oneof parent {
    string parent_workspace_id = 2;
    string parent_asset_id = 3;
  }
  // An address is an optional string of one or more characters used to locate
  // the asset, and the address_type identifies the type of the address. It is
  // up to the implementation to decide how to use addresses, but one example
  // could be to use address_type "url" to signal that an address field (as it
  // appears in a GUI) is a clickable link that will open a browser to the given
  // address. Plain text format is used for both fields.
  optional string address = 4;
  optional string address_type = 5;
  // A list of zero or more child Assets.
  repeated string child_asset_id = 8;
  // A list of Groups which own this Asset. Members of these groups may modify
  // the Asset.
  repeated string owner_group_id = 9;
  // A list of Friends of the Asset. Members of friend groups may view the
  // Asset, but not modify it.
  repeated string friend_group_id = 10;
  // An optional string of one or more characters providing a description of the
  // asset. Markdown format is accepted.
  optional string description = 11;
  // The ID of the Person who created the asset.
  optional string created_by_person_id = 12;
  // The number of milliseconds since the Unix epoch that the asset was
  // created.
  optional int64 created_at_unix_epoch_ms = 13;
  // The ID of the Person who most recently modified the asset.
  optional string most_recently_modified_by_person_id = 14;
  // The number of milliseconds since the Unix epoch that the asset was
  // created.
  optional int64 most_recently_modified_at_unix_epoch_ms = 15;
  // The roof of the Asset's comment tree.
  repeated int64 comment_id = 16;
}

// Comments provide a means for discussions of Tasks, Groups, Workspaces, and
// Assets.
message Comment {
  // The id is a positive integer which uniquely identifies the Comment amongst
  // all other Comments in a Workspace. The id is a counter: the first Comment
  // is assigned id 1, the second comment id 2, etc.
  optional int64 id = 1;
  // A Comment belongs to either a Workspace, Task, Asset, Tag, or another
  // Comment.
  oneof parent {
    string parent_workspace_id = 2;
    string parent_task_id = 3;
    string parent_asset_id = 4;
    int64 parent_tag_id = 5;
    int64 parent_comment_id = 6;
  }
  // A list of zero or more child Comments.
  repeated int64 child_comment_id = 7;
  // A string of one or more characters providing the text body of the comment.
  // Markdown format is accepted.
  optional string body = 8;
  // The ID of the Person who created the comment.
  optional string created_by_person_id = 9;
  // The number of milliseconds since the Unix epoch that the comment was
  // created.
  optional int64 created_at_unix_epoch_ms = 10;
  // The pid of the Person who most recently modified the comment.
  optional string most_recently_modified_by_pid = 11;
  // The number of milliseconds since the Unix epoch that the comment was
  // most recently modified.
  optional int64 most_recently_modified_at_unix_epoch_ms = 12;
}
