# This package implements corpuses for training CLgen.

py_library(
    name = "atomizers",
    srcs = ["atomizers.py"],
    visibility = ["//visibility:public"],
    deps = [
        "//deeplearning/clgen:errors",
        "//labm8:labdate",
        "//third_party/py/absl",
        "//third_party/py/numpy",
    ],
)

py_test(
    name = "atomizers_test",
    srcs = ["atomizers_test.py"],
    default_python_version = "PY3",
    srcs_version = "PY3",
    deps = [
        ":atomizers",
        "//labm8:test",
        "//third_party/py/absl",
    ],
)

py_library(
    name = "corpuses",
    srcs = ["corpuses.py"],
    visibility = ["//deeplearning/clgen:__subpackages__"],
    deps = [
        ":atomizers",
        ":encoded",
        ":preprocessed",
        "//deeplearning/clgen:cache",
        "//deeplearning/clgen:errors",
        "//deeplearning/clgen/preprocessors",
        "//deeplearning/clgen/proto:corpus_py_pb2",
        "//labm8:bazelutil",
        "//labm8:crypto",
        "//labm8:hashcache",
        "//labm8:lockfile",
        "//labm8:pbutil",
        "//third_party/py/absl",
        "//third_party/py/checksumdir",
        "//third_party/py/humanize",
        "//third_party/py/numpy",
        "//third_party/py/sqlalchemy",
    ],
)

py_test(
    name = "corpuses_test",
    srcs = ["corpuses_test.py"],
    default_python_version = "PY3",
    srcs_version = "PY3",
    deps = [
        ":corpuses",
        "//deeplearning/clgen:conftest",
        "//deeplearning/clgen:errors",
        "//deeplearning/clgen/preprocessors:common",
        "//deeplearning/clgen/preprocessors:cxx",
        "//deeplearning/clgen/preprocessors:opencl",
        "//deeplearning/clgen/proto:corpus_py_pb2",
        "//labm8:fs",
        "//labm8:test",
        "//third_party/py/absl",
    ],
)

py_library(
    name = "encoded",
    srcs = ["encoded.py"],
    deps = [
        ":preprocessed",
        "//deeplearning/clgen:errors",
        "//deeplearning/clgen/preprocessors",
        "//labm8:sqlutil",
        "//third_party/py/absl",
        "//third_party/py/humanize",
        "//third_party/py/numpy",
        "//third_party/py/progressbar",
        "//third_party/py/sqlalchemy",
    ],
)

py_test(
    name = "encoded_test",
    srcs = ["encoded_test.py"],
    default_python_version = "PY3",
    srcs_version = "PY3",
    deps = [
        ":atomizers",
        ":encoded",
        ":preprocessed",
        "//deeplearning/clgen:errors",
        "//labm8:test",
        "//third_party/py/absl",
    ],
)

py_library(
    name = "features",
    srcs = ["features.py"],
    data = [
        ":opencl_kernel_features",
        "//deeplearning/clgen/data/include:opencl-shim",
    ],
    deps = [
        "//deeplearning/clgen:errors",
        "//labm8:bazelutil",
        "//labm8:labmath",
        "//third_party/py/numpy",
    ],
)

# The rather ludicrous combination of data, of copts and linkopts is a result
# of bashing my head against the wall for a few days trying to get the damn
# things to compile and link against a remote LLVM binary release. The
# abomination of options below works as of the time of writing (2018-06-12).
# This is *definitely* not the best way to do it, but it's the only way I
# could get it work given the seemingly picky ordering of LLVM link libraries,
# and the sandboxing of bazel's build.
cc_binary(
    name = "opencl_kernel_features",
    srcs = ["opencl_kernel_features.cpp"],
    copts = [
        "-fPIC",
        "-fvisibility-inlines-hidden",
        "-Werror=date-time",
        "-std=c++11",
        "-Wall",
        "-W",
        "-Wno-unused-parameter",
        "-Wwrite-strings",
        "-Wcast-qual",
        "-Wno-missing-field-initializers",
        "-pedantic",
        "-Wno-long-long",
        "-Wdelete-non-virtual-dtor",
        "-Wno-comment",
        "-fno-rtti",
        "-ffunction-sections",
        "-fdata-sections",
        "-DNDEBUG",
        "-D_GNU_SOURCE",
        "-D__STDC_CONSTANT_MACROS",
        "-D__STDC_FORMAT_MACROS",
        "-D__STDC_LIMIT_MACROS",
    ],
    data = select({
        "//:darwin": ["@llvm_mac//:libdir"],
        "//conditions:default": ["@llvm_linux//:libdir"],
    }),
    linkopts = select({
        "//:darwin": [
            "-Wl,-rpath,$(location @llvm_mac//:libdir)/",
            "-L$(location @llvm_mac//:libdir)/",
        ],
        "//conditions:default": [
            "-Wl,-rpath,$(location @llvm_linux//:libdir)/",
            "-L$(location @llvm_linux//:libdir)/",
        ],
    }) + [
        # TODO(cec): I expect that this list can be pruned somewhat.
        "-pthread",
        "-ldl",
        "-lz",
        "-lclangARCMigrate",
        "-lclangFrontend",
        "-lclangFrontendTool",
        "-lclangDriver",
        "-lclangSerialization",
        "-lclangCodeGen",
        "-lclangParse",
        "-lclangSema",
        "-lclangRewriteFrontend",
        "-lclangRewrite",
        "-lclangStaticAnalyzerFrontend",
        "-lclangStaticAnalyzerCheckers",
        "-lclangStaticAnalyzerCore",
        "-lclangAnalysis",
        "-lclangEdit",
        "-lclangAST",
        "-lclangASTMatchers",
        "-lclangLex",
        "-lclangBasic",
        "-lclangTooling",
        "-lclangToolingCore",
    ] + select({
        "//:darwin": [],
        "//conditions:default": ["-lclang"],
    }) + [
        "-lLLVMLTO",
        "-lLLVMPasses",
        "-lLLVMObjCARCOpts",
        "-lLLVMMIRParser",
        "-lLLVMSymbolize",
        "-lLLVMDebugInfoPDB",
        "-lLLVMDebugInfoDWARF",
        "-lLLVMCoverage",
        "-lLLVMTableGen",
        "-lLLVMDlltoolDriver",
        "-lLLVMOrcJIT",
        "-lLLVMXCoreDisassembler",
        "-lLLVMXCoreCodeGen",
        "-lLLVMXCoreDesc",
        "-lLLVMXCoreInfo",
        "-lLLVMXCoreAsmPrinter",
        "-lLLVMSystemZDisassembler",
        "-lLLVMSystemZCodeGen",
        "-lLLVMSystemZAsmParser",
        "-lLLVMSystemZDesc",
        "-lLLVMSystemZInfo",
        "-lLLVMSystemZAsmPrinter",
        "-lLLVMSparcDisassembler",
        "-lLLVMSparcCodeGen",
        "-lLLVMSparcAsmParser",
        "-lLLVMSparcDesc",
        "-lLLVMSparcInfo",
        "-lLLVMSparcAsmPrinter",
        "-lLLVMPowerPCDisassembler",
        "-lLLVMPowerPCCodeGen",
        "-lLLVMPowerPCAsmParser",
        "-lLLVMPowerPCDesc",
        "-lLLVMPowerPCInfo",
        "-lLLVMPowerPCAsmPrinter",
        "-lLLVMNVPTXCodeGen",
        "-lLLVMNVPTXDesc",
        "-lLLVMNVPTXInfo",
        "-lLLVMNVPTXAsmPrinter",
        "-lLLVMMSP430CodeGen",
        "-lLLVMMSP430Desc",
        "-lLLVMMSP430Info",
        "-lLLVMMSP430AsmPrinter",
        "-lLLVMMipsDisassembler",
        "-lLLVMMipsCodeGen",
        "-lLLVMMipsAsmParser",
        "-lLLVMMipsDesc",
        "-lLLVMMipsInfo",
        "-lLLVMMipsAsmPrinter",
        "-lLLVMLanaiDisassembler",
        "-lLLVMLanaiCodeGen",
        "-lLLVMLanaiAsmParser",
        "-lLLVMLanaiDesc",
        "-lLLVMLanaiAsmPrinter",
        "-lLLVMLanaiInfo",
        "-lLLVMHexagonDisassembler",
        "-lLLVMHexagonCodeGen",
        "-lLLVMHexagonAsmParser",
        "-lLLVMHexagonDesc",
        "-lLLVMHexagonInfo",
        "-lLLVMBPFDisassembler",
        "-lLLVMBPFCodeGen",
        "-lLLVMBPFAsmParser",
        "-lLLVMBPFDesc",
        "-lLLVMBPFInfo",
        "-lLLVMBPFAsmPrinter",
        "-lLLVMARMDisassembler",
        "-lLLVMARMCodeGen",
        "-lLLVMARMAsmParser",
        "-lLLVMARMDesc",
        "-lLLVMARMInfo",
        "-lLLVMARMAsmPrinter",
        "-lLLVMARMUtils",
        "-lLLVMAMDGPUDisassembler",
        "-lLLVMAMDGPUCodeGen",
        "-lLLVMAMDGPUAsmParser",
        "-lLLVMAMDGPUDesc",
        "-lLLVMAMDGPUInfo",
        "-lLLVMAMDGPUAsmPrinter",
        "-lLLVMAMDGPUUtils",
        "-lLLVMAArch64Disassembler",
        "-lLLVMAArch64CodeGen",
        "-lLLVMAArch64AsmParser",
        "-lLLVMAArch64Desc",
        "-lLLVMAArch64Info",
        "-lLLVMAArch64AsmPrinter",
        "-lLLVMAArch64Utils",
        "-lLLVMObjectYAML",
        "-lLLVMLibDriver",
        "-lLLVMOption",
        "-lLLVMWindowsManifest",
        "-lLLVMFuzzMutate",
        "-lLLVMX86Disassembler",
        "-lLLVMX86AsmParser",
        "-lLLVMX86CodeGen",
        "-lLLVMGlobalISel",
        "-lLLVMSelectionDAG",
        "-lLLVMAsmPrinter",
        "-lLLVMDebugInfoCodeView",
        "-lLLVMDebugInfoMSF",
        "-lLLVMX86Desc",
        "-lLLVMMCDisassembler",
        "-lLLVMX86Info",
        "-lLLVMX86AsmPrinter",
        "-lLLVMX86Utils",
        "-lLLVMMCJIT",
        "-lLLVMLineEditor",
        "-lLLVMInterpreter",
        "-lLLVMExecutionEngine",
        "-lLLVMRuntimeDyld",
        "-lLLVMCodeGen",
        "-lLLVMTarget",
        "-lLLVMCoroutines",
        "-lLLVMipo",
        "-lLLVMInstrumentation",
        "-lLLVMVectorize",
        "-lLLVMScalarOpts",
        "-lLLVMLinker",
        "-lLLVMIRReader",
        "-lLLVMAsmParser",
        "-lLLVMInstCombine",
        "-lLLVMTransformUtils",
        "-lLLVMBitWriter",
        "-lLLVMAnalysis",
        "-lLLVMProfileData",
        "-lLLVMObject",
        "-lLLVMMCParser",
        "-lLLVMMC",
        "-lLLVMBitReader",
        "-lLLVMCore",
        "-lLLVMBinaryFormat",
        "-lLLVMSupport",
        "-lLLVMDemangle",
    ] + select({
        "//:darwin": ["-lncurses"],
        "//conditions:default": [],
    }),
    deps = select({
        "//:darwin": [
            "@llvm_headers_mac//:headers",
            "@llvm_mac//:libs",
        ],
        "//conditions:default": [
            "@llvm_headers_linux//:headers",
            "@llvm_linux//:libs",
        ],
    }),
)

py_library(
    name = "preprocessed",
    srcs = ["preprocessed.py"],
    deps = [
        "//deeplearning/clgen:errors",
        "//deeplearning/clgen/preprocessors",
        "//deeplearning/clgen/proto:corpus_py_pb2",
        "//labm8:crypto",
        "//labm8:fs",
        "//labm8:sqlutil",
        "//third_party/py/absl",
        "//third_party/py/progressbar",
        "//third_party/py/sqlalchemy",
    ],
)
