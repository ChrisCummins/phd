// A Harness executes testcases.
//
// Copyright (c) 2017-2020 Chris Cummins.
//
// DeepSmith is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// DeepSmith is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with DeepSmith.  If not, see <https://www.gnu.org/licenses/>.

syntax = "proto2";

package deepsmith;

option go_package = "deepsmithpb";
option java_multiple_files = true;
option java_outer_classname = "HarnessProto";
option java_package = "com.deepsmith";

import "deeplearning/deepsmith/proto/deepsmith.proto";
import "deeplearning/deepsmith/proto/service.proto";

service HarnessService {
  rpc GetHarnessCapabilities(GetHarnessCapabilitiesRequest) returns (GetHarnessCapabilitiesResponse);
  rpc RunTestcases(RunTestcasesRequest) returns (RunTestcasesResponse);
}

message GetHarnessCapabilitiesRequest {
  optional ServiceStatus status = 1;
}

message GetHarnessCapabilitiesResponse {
  optional ServiceStatus status = 1;
  optional Harness harness = 2;
  repeated Testbed testbed = 3;
}

message RunTestcasesRequest {
  optional ServiceStatus status = 1;
  optional Testbed testbed = 2;
  repeated Testcase testcases = 3;
}

message RunTestcasesResponse {
  optional ServiceStatus status = 1;
  repeated Result results = 2;
}

// A harness which passes a source code input to a compiler.
// The harness drives testcases by running the specified 'argv' string, and
// passing the 'src' input of a testcase to the command's stdin.
message CompilerHarness {
  optional ServiceConfig service = 1;
  // The command used to invoke the compiler.
  optional string argv = 2;
}

// A harness which uses cldrive to run testcases.
message CldriveHarness {
  optional ServiceConfig service = 1;
  // A list of OpenCL environments to run test cases on.
  // Use `//gpu/cldrive --ls_env` to list the available environments.
  // If no environments are specified, all available environments will be used.
  repeated string opencl_env = 2;
  // A list of bools determining whether OpenCL optimizations should be enabled
  // for the corresponding opencl_env.
  repeated bool opencl_opt = 3;
  // A list of additional command line options to pass to the compiler during
  // compilation of C harness programs. These flags are appended to the existing
  // command line.
  repeated string driver_cflag = 4;
}

// A harness which uses cldrive to run testcases.
message ClLauncherHarness {
  optional ServiceConfig service = 1;
  // A list of OpenCL environments to run test cases on.
  // Use `//gpu/cldrive --ls_env` to list the available environments.
  // If no environments are specified, all available environments will be used.
  repeated string opencl_env = 2;
  // A list of bools determining whether OpenCL optimizations should be enabled
  // for the corresponding opencl_env.
  repeated bool opencl_opt = 3;
  // A list of additional command line options to pass to cl_launcher. These
  // flags are appended to the existing command line.
  repeated string opts = 4;
}
