syntax = "proto2";
package deepsmith;

message ProfilingEvent {
  // A unique client name. A good starting point would be the hostname.
  optional string client = 1;

  // The type of profiling event. E.g. "overhead", "generation", "warmup", etc.
  optional string type = 2;

  // The duration of the event, expressed in milliseconds.
  optional int64 duration_ms = 3;

  // The start of the profiling event, expressed in milliseconds since the
  // epoch.
  optional int64 event_start_epoch_ms = 4;
}

message Testcase {
  optional string toolchain = 1;
  optional Generator generator = 2;
  optional Harness harness = 3;

  // <input_name, input_value>
  map<string, string> inputs = 4;

  map<string, string> invariant_opts = 5;

  repeated ProfilingEvent profiling_events = 6;
}

message Generator {
  optional string name = 1;
  map<string, string> opts = 2;
}

message Harness {
  optional string name = 1;
  map<string, string> opts = 2;
}

message Testbed {
  optional string toolchain = 1;
  optional string name = 2;
  map<string, string> opts = 3;
}

message Result {
  // A testcase outcome. This describes the result of the harness execution, not
  // of differential testing.
  enum Outcome {
    UNKNOWN = 0;
    // The tescase failed to compile.
    BUILD_FAILURE = 1;
    // The tescase crashed during compilation.
    BUILD_CRASH = 2;
    // The tescase timed out during compilation.
    BUILD_TIMEOUT = 3;
    // The tescase crashed after compilation, during execution of the binary.
    RUNTIME_CRASH = 4;
    // The tescase timed out after compilation, during execution of the binary.
    RUNTIME_TIMEOUT = 5;
    // The tescase compiled, and the binary terminated gracefully.
    PASS = 6;
  }

  optional Testcase testcase = 1;
  optional Testbed testbed = 2;
  optional int32 returncode = 3;
  // <name, value>
  map<string, string> outputs = 4;
  repeated ProfilingEvent profiling_events = 5;
  // The testcase outcome.
  optional Outcome outcome = 6;
}

message DifferentialTest {
  // A differential test outcome.
  enum Outcome {
    UNKNOWN = 0;
    // Majority outcome is not a build failure/crash, but this result is.
    ANOMALOUS_BUILD_FAILURE = 1;
    // Majority outcome is a build failure, but this result builds.
    ANOMALOUS_BUILD_PASS = 2;
    // Majority outcome is a pass, but this result crashes.
    ANOMALOUS_RUNTIME_CRASH = 3;
    // Majority outcome is a runtime crash, but this result passes.
    ANOMALOUS_RUNTIME_PASS = 4;
    // Outputs differ between this result and the majority.
    ANOMALOUS_WRONG_OUTPUT = 5;
    // Majority pass, but this result times out.
    ANOMALOUS_RUNTIME_TIMEOUT = 6;
    // Outcome and outputs agrees with majority.
    PASS = 7;
  }

  // The testcase to apply the differential test to. This supercedes the
  // 'testcase' fields of the differential test's results - all results are
  // assumed to be of this testcase.
  optional Testcase testcase = 1;

  // The results to differential test. The 'testcase' field of these results
  // is ignored.
  repeated Result result = 2;
  // The outcomes of the differential test. There is one outcome for each
  // result.
  repeated Outcome outcome = 3;
}
