// A DataStore acts as the backend for DeepSmith.
//
// The DataStore stores generated testcases, results from executing testcases,
// and analysis of testcase results. The DataStore service acts as the central
// hub for accesing data.

syntax = "proto2";
package deepsmith;

import "deeplearning/deepsmith/proto/deepsmith.proto";
import "deeplearning/deepsmith/proto/service.proto";

message DataStore {
  message Sqlite {
    optional string path = 1;
    optional bool inmemory = 2 [default = false];
  }

  message MySql {
    optional string database = 1;
    optional string hostname = 2 [default = "localhost"];
    optional int32 port = 3 [default = 3306];
    optional string username = 4;
    optional string password = 5;
  }

  message PostgreSql {
    optional string database = 1;
    optional string hostname = 2 [default = "localhost"];
    optional int32 port = 3 [default = 5432];
    optional string username = 4;
    optional string password = 5;
  }

  optional ServiceConfig service = 1;

  oneof backend {
    Sqlite sqlite = 2;
    MySql mysql = 3;
    PostgreSql postgresql = 4;
  }

  optional bool create_database_if_not_exist = 100;

  // Mark this datastore as _only_ for testing.
  optional bool testonly = 101;
}

// A map of datastore names to configs.
//
// Used by //deeplearning/deepsmith:conftest to parameterize the test fixtures
// used for unit tests.
message DataStoreTestSet {
  map<string, DataStore> values = 1;
}

service DataStoreService {
  rpc GetTestcases (GetTestcasesRequest) returns (GetTestcasesResponse);
  rpc SubmitTestcases (SubmitTestcasesRequest) returns (SubmitTestcasesResponse);
  rpc SubmitResults (SubmitResultsRequest) returns (SubmitResultsResponse);
}

message GetTestcasesRequest {
  optional ServiceStatus status = 1;

  // If set, return only testcases of this toolchain.
  optional string toolchain = 2;
  // If set, return only testcases generated by this Generator.
  optional Generator generator = 3;
  // If set, return only testcases for this harness.
  optional Harness harness = 4;

  optional bool return_testcases = 5 [default = true];
  repeated Testbed mark_results_pending = 6;

  // Must be >= 1.
  optional int32 max_num_testcases_to_return = 7 [default = 100];

  optional bool include_testcases_with_results = 8 [default = false];
  optional bool include_testcases_with_pending_results = 9 [default = false];
  optional bool return_total_matching_count = 11 [default = false];
}

message GetTestcasesResponse {
  optional ServiceStatus status = 1;
  repeated Testcase testcases = 2;
  optional int64 total_matching_count = 3;
}

message SubmitTestcasesRequest {
  optional ServiceStatus status = 1;
  repeated Testcase testcases = 2;
}

message SubmitTestcasesResponse {
  optional ServiceStatus status = 1;
  optional int32 num_truncated_outputs = 2;
}

message GetResultsRequest {
  optional ServiceStatus status = 1;

  // If set, return only results of this toolchain.
  optional string toolchain = 2;
  // If set, return only results generated by this Generator.
  optional Generator generator = 3;
  // If set, return only results for this harness.
  optional Harness harness = 4;
  // If set, return only results for this testbed.
  optional Testbed testbed = 6;

  optional bool return_results = 5 [default = true];

  // Must be >= 1.
  optional int32 max_num_results_to_return = 7 [default = 100];

  optional bool return_total_matching_count = 11 [default = false];
}

message GetResultsResponse {
  optional ServiceStatus status = 1;
  repeated Result results = 2;
  optional int64 total_matching_count = 3;
}

message SubmitResultsRequest {
  optional ServiceStatus status = 1;
  repeated Result results = 2;
}

message SubmitResultsResponse {
  optional ServiceStatus status = 1;
}
