"""Unit tests for //deeplearning/ml4pl/graphs/labelled/subexpressions."""
import networkx as nx
import pytest
from labm8 import app
from labm8 import test

from deeplearning.ml4pl.graphs.labelled.subexpressions import subexpressions

FLAGS = app.FLAGS


@pytest.fixture(scope='function')
def wiki() -> nx.MultiDiGraph:
  # a = b * c + g;
  # d = b * c * e;
  g = nx.MultiDiGraph()
  g.add_node('a1', type='identifier', name='a1')
  g.add_node('a2', type='identifier', name='a2')
  g.add_node('b', type='identifier', name='b')
  g.add_node('c', type='identifier', name='c')
  g.add_node('d1', type='identifier', name='d1')
  g.add_node('d2', type='identifier', name='d2')
  g.add_node('e', type='identifier', name='e')
  g.add_node('g', type='identifier', name='g')

  g.add_node('s0', type='statement', text='<int> = <int> * <int>')
  g.add_node('s1', type='statement', text='<int> = <int> * <int>')
  g.add_node('s2', type='statement', text='<int> = <int> + <int>')
  g.add_node('s3', type='statement', text='<int> = <int> + <int>')

  g.add_edge('s0', 'a1', flow='data', position=0)
  g.add_edge('b', 's0', flow='data', position=0)
  g.add_edge('c', 's0', flow='data', position=1)
  g.add_edge('s1', 'd1', flow='data', position=0)
  g.add_edge('b', 's1', flow='data', position=0)
  g.add_edge('c', 's1', flow='data', position=1)

  g.add_edge('a1', 's2', flow='data', position=0)
  g.add_edge('g', 's2', flow='data', position=1)
  g.add_edge('s2', 'a2', flow='data', position=0)

  g.add_edge('d1', 's3', flow='data', position=0)
  g.add_edge('e', 's3', flow='data', position=1)
  g.add_edge('s3', 'd2', flow='data', position=0)
  return g


@pytest.fixture(scope='function')
def wiki_without_subexpressions() -> nx.MultiDiGraph:
  """Same as the wiki graph, but the order of the operands for the two
  multiplications has been reversed so that they are no longer common.
  """
  # a = b * c + g;
  # d = c * b * e;
  g = nx.MultiDiGraph()
  g.add_node('a1', type='identifier', name='a1')
  g.add_node('a2', type='identifier', name='a2')
  g.add_node('b', type='identifier', name='b')
  g.add_node('c', type='identifier', name='c')
  g.add_node('d1', type='identifier', name='d1')
  g.add_node('d2', type='identifier', name='d2')
  g.add_node('e', type='identifier', name='e')
  g.add_node('g', type='identifier', name='g')

  g.add_node('s0', type='statement', text='<int> = <int> * <int>')
  g.add_node('s1', type='statement', text='<int> = <int> * <int>')
  g.add_node('s2', type='statement', text='<int> = <int> + <int>')
  g.add_node('s3', type='statement', text='<int> = <int> + <int>')

  g.add_edge('s0', 'a1', flow='data', position=0)
  g.add_edge('b', 's0', flow='data', position=0)
  g.add_edge('c', 's0', flow='data', position=1)
  g.add_edge('s1', 'd1', flow='data', position=0)
  g.add_edge('b', 's1', flow='data', position=1)
  g.add_edge('c', 's1', flow='data', position=0)

  g.add_edge('a1', 's2', flow='data', position=0)
  g.add_edge('g', 's2', flow='data', position=1)
  g.add_edge('s2', 'a2', flow='data', position=0)

  g.add_edge('d1', 's3', flow='data', position=0)
  g.add_edge('e', 's3', flow='data', position=1)
  g.add_edge('s3', 'd2', flow='data', position=0)
  return g


def test_GetExpressionSets_wiki(wiki: nx.MultiDiGraph):
  expressions = subexpressions.GetExpressionSets(wiki)
  assert expressions == {
      ('<int> = <int> * <int>', ('b', 'c')): ['s0', 's1'],
      ('<int> = <int> + <int>', ('a1', 'g')): ['s2'],
      ('<int> = <int> + <int>', ('d1', 'e')): ['s3'],
  }


def test_GetExpressionSets_wiki_without_subexpressions(
    wiki_without_subexpressions: nx.MultiDiGraph):
  expressions = subexpressions.GetExpressionSets(wiki_without_subexpressions)
  assert expressions == {
      ('<int> = <int> * <int>', ('b', 'c')): ['s0'],
      ('<int> = <int> * <int>', ('c', 'b')): ['s1'],
      ('<int> = <int> + <int>', ('a1', 'g')): ['s2'],
      ('<int> = <int> + <int>', ('d1', 'e')): ['s3'],
  }


def test_MakeSubexpressionsGraphs_wiki(wiki: nx.MultiDiGraph):
  """Test the labels generated by a graph with a common subexpression."""
  graphs = list(subexpressions.MakeSubexpressionsGraphs(wiki))
  assert len(graphs) == 1

  g = graphs[0]

  # Features
  assert g.nodes['a1']['x'] != g.nodes['d1']['x']
  assert g.nodes['a2']['x'] == 0
  assert g.nodes['b']['x'] == 0
  assert g.nodes['c']['x'] == 0
  assert g.nodes['d2']['x'] == 0
  assert g.nodes['e']['x'] == 0
  assert g.nodes['g']['x'] == 0

  assert g.nodes['s0']['x'] == 0
  assert g.nodes['s1']['x'] == 0
  assert g.nodes['s2']['x'] == 0
  assert g.nodes['s3']['x'] == 0

  # Labels
  assert g.nodes['a1']['y'] == 1
  assert g.nodes['a2']['y'] == 0
  assert g.nodes['b']['y'] == 0
  assert g.nodes['c']['y'] == 0
  assert g.nodes['d1']['y'] == 1
  assert g.nodes['d2']['y'] == 0
  assert g.nodes['e']['y'] == 0
  assert g.nodes['g']['y'] == 0

  assert g.nodes['s0']['y'] == 0
  assert g.nodes['s1']['y'] == 0
  assert g.nodes['s2']['y'] == 0
  assert g.nodes['s3']['y'] == 0


def test_MakeSubexpressionsGraphs_wiki_without_subexpressions(
    wiki_without_subexpressions: nx.MultiDiGraph):
  """Test that graph without common subexpressions yields no graphs."""
  graphs = list(
      subexpressions.MakeSubexpressionsGraphs(wiki_without_subexpressions))
  assert len(graphs) == 0


if __name__ == '__main__':
  test.Main()
