// Protocol buffer for the ProGraML representation.
//
// Copyright 2019 the ProGraML authors.
//
// Contact Chris Cummins <chrisc.101@gmail.com>.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package ml4pl;

option go_package = "ml4plpb";
option java_multiple_files = true;
option java_outer_classname = "ProgramlProto";
option java_package = "com.ml4pl";

// A program graph.
message ProgramGraph {
  repeated Node node = 1;
  repeated Edge edge = 2;
  repeated Function function = 3;
  // Optional vectors of graph-level features and labels.
  repeated int64 x = 5;
  repeated int64 y = 6;
  // Optional fields for encoding data flow annotations.
  //
  // For iterative data flow analyses which have a defined "starting point",
  // this is the index into the node list of that starting point.
  optional int32 data_flow_root_node = 7;
  // For iterative data flow analyses, this is the number of steps that the data
  // flow analysis required to compute the annotations.
  optional int32 data_flow_steps = 8;
  // The number of nodes with "positive" analysis results.
  optional int32 data_flow_positive_node_count = 9;
}

message Function {
  // The name of the function.
  required string name = 1;
}

message Node {
  // The node type.
  enum Type {
    STATEMENT = 0;
    IDENTIFIER = 1;
    IMMEDIATE = 2;
  }
  required Type type = 1;
  // The text of a node. This is the raw representation of a node, such as the
  // contents of a statement, or the name of an identifier.
  required string text = 2;
  // The pre-processed text of a node. This is the
  required string preprocessed_text = 3;
  // An index into the ProgramGraph.function list indicating the source function
  // for this node. Omitting this fields means the node does not belong to a
  // function, such as the case for global identifiers.
  optional int32 function = 4;
  // Optional vectors of node-level features and labels.
  repeated int64 x = 5;
  repeated int64 y = 6;
}

message Edge {
  // The edge flow type.
  enum Flow {
    CONTROL = 0;
    DATA = 1;
    CALL = 2;
  }
  required Flow flow = 1;
  // The source and destination nodes of the edge, as andicies into a
  // ProgramGraph.node list.
  required int32 source_node = 2;
  required int32 destination_node = 3;
  // The position of an edge.
  required int32 position = 4 [default = 0];
}

// A collection of program graphs.
message ProgramGraphs {
  repeated ProgramGraph graph = 1;
}
